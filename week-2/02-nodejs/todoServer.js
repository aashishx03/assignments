/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const mongoose = require("mongoose");

require("dotenv").config();

const app = express();

app.use(express.json());

mongoose
  .connect(process.env.DB_URI)
  .then(() => {
    console.log("Db is connected");
    app.listen(process.env.PORT || 3000, () => {
      console.log("App is running");
    });
  })
  .catch((err) => {
    console.log("Error connetingc to DB:" + err);
  });

// Setting model/schema for todos

const todoSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String },
  completed: { type: Boolean, required: true },
});

const Todo = mongoose.model("Todo", todoSchema);

// 1.GET /todos - Retrieve all todo items
app.get("/todos", async (req, res) => {
  const data = await Todo.find();
  res.status(200).json({ data });
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
app.get("/todos/:id", async (req, res) => {
  try {
    const todoId = req.params.id;
    const todo = await Todo.findById(todoId);
    if (!todo) {
      res.status(404).json({ message: "Todo not Find" });
    }
    res.status(200).json(todo);
  } catch (err) {
    console.log(err);
    res.send("Server Error");
  }
});

// 3. POST /todos - Create a new todo item
app.post("/todos", async (req, res) => {
  try {
    const todo = await Todo.create(req.body);
    res.status(201).json(todo);
  } catch (err) {
    console.error(err);
    res.status(500).send("Server Error");
  }
});

// 4. PUT /todos/:id - Update an existing todo item by ID
app.put("/todos/:id", async (req, res) => {
  try {
    const todoId = req.params.id;
    console.log(typeof todoId);
    const updateTodo = await Todo.findByIdAndUpdate(todoId, req.body, {
      new: true,
    });

    if (!updateTodo) {
      res.send(404).json({ message: "Todo Not Found" });
    }

    res.json(updateTodo);
  } catch (err) {
    console.error(err);
    res.status(500).send("Server Error");
  }
});
// 5. DELETE /todos/:id - Delete a todo item by ID

app.delete("/todos/:id", async (req, res) => {
  try {
    const todoId = req.params.id;
    const todo = await Todo.findByIdAndDelete(todoId);

    if (!todo) {
      res.status(404).json({ message: "Todo not Found" });
    }

    res.json({ message: "Todo Deleted", todo });
  } catch (err) {
    console.error(err);
    res.status(400).send("Server Error");
  }
});

module.exports = app;
